// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    id,
    username,
	password,
	first_name,
	last_name,
	address,
	email,
	phone_number,
	active,
	create_at,
	update_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, username, password, first_name, last_name, address, email, phone_number, active, create_at, update_at
`

type CreateUserParams struct {
	ID          int64          `json:"id"`
	Username    sql.NullString `json:"username"`
	Password    sql.NullString `json:"password"`
	FirstName   sql.NullString `json:"first_name"`
	LastName    sql.NullString `json:"last_name"`
	Address     sql.NullString `json:"address"`
	Email       string         `json:"email"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Active      sql.NullBool   `json:"active"`
	CreateAt    sql.NullTime   `json:"create_at"`
	UpdateAt    sql.NullTime   `json:"update_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Address,
		arg.Email,
		arg.PhoneNumber,
		arg.Active,
		arg.CreateAt,
		arg.UpdateAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Address,
		&i.Email,
		&i.PhoneNumber,
		&i.Active,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getUserInfoByEmail = `-- name: GetUserInfoByEmail :many
SELECT id, username, password, first_name, last_name, address, email, phone_number, active, create_at, update_at from users
WHERE
    email=$1
`

func (q *Queries) GetUserInfoByEmail(ctx context.Context, email string) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUserInfoByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.FirstName,
			&i.LastName,
			&i.Address,
			&i.Email,
			&i.PhoneNumber,
			&i.Active,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
	username=$2,
	first_name=$3,
	last_name=$4,
	address=$5,
	email = $6,
	phone_number = $7
WHERE
	id=$1
RETURNING id, username, password, first_name, last_name, address, email, phone_number, active, create_at, update_at
`

type UpdateUserParams struct {
	ID          int64          `json:"id"`
	Username    sql.NullString `json:"username"`
	FirstName   sql.NullString `json:"first_name"`
	LastName    sql.NullString `json:"last_name"`
	Address     sql.NullString `json:"address"`
	Email       string         `json:"email"`
	PhoneNumber sql.NullString `json:"phone_number"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Address,
		arg.Email,
		arg.PhoneNumber,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.Address,
		&i.Email,
		&i.PhoneNumber,
		&i.Active,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}
