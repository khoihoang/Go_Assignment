// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: user-service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserGrpcClient is the client API for UserGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGrpcClient interface {
	CreateUser(ctx context.Context, in *GrpcCreateUserRequest, opts ...grpc.CallOption) (*GrpcCreateUserResponse, error)
	UpdateUser(ctx context.Context, in *GrpcUpdateUserRequest, opts ...grpc.CallOption) (*GrpcUpdateUserResponse, error)
}

type userGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGrpcClient(cc grpc.ClientConnInterface) UserGrpcClient {
	return &userGrpcClient{cc}
}

func (c *userGrpcClient) CreateUser(ctx context.Context, in *GrpcCreateUserRequest, opts ...grpc.CallOption) (*GrpcCreateUserResponse, error) {
	out := new(GrpcCreateUserResponse)
	err := c.cc.Invoke(ctx, "/pb.UserGrpc/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcClient) UpdateUser(ctx context.Context, in *GrpcUpdateUserRequest, opts ...grpc.CallOption) (*GrpcUpdateUserResponse, error) {
	out := new(GrpcUpdateUserResponse)
	err := c.cc.Invoke(ctx, "/pb.UserGrpc/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGrpcServer is the server API for UserGrpc service.
// All implementations must embed UnimplementedUserGrpcServer
// for forward compatibility
type UserGrpcServer interface {
	CreateUser(context.Context, *GrpcCreateUserRequest) (*GrpcCreateUserResponse, error)
	UpdateUser(context.Context, *GrpcUpdateUserRequest) (*GrpcUpdateUserResponse, error)
	mustEmbedUnimplementedUserGrpcServer()
}

// UnimplementedUserGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedUserGrpcServer struct {
}

func (UnimplementedUserGrpcServer) CreateUser(context.Context, *GrpcCreateUserRequest) (*GrpcCreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserGrpcServer) UpdateUser(context.Context, *GrpcUpdateUserRequest) (*GrpcUpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserGrpcServer) mustEmbedUnimplementedUserGrpcServer() {}

// UnsafeUserGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGrpcServer will
// result in compilation errors.
type UnsafeUserGrpcServer interface {
	mustEmbedUnimplementedUserGrpcServer()
}

func RegisterUserGrpcServer(s grpc.ServiceRegistrar, srv UserGrpcServer) {
	s.RegisterService(&UserGrpc_ServiceDesc, srv)
}

func _UserGrpc_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserGrpc/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServer).CreateUser(ctx, req.(*GrpcCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpc_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcUpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserGrpc/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServer).UpdateUser(ctx, req.(*GrpcUpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGrpc_ServiceDesc is the grpc.ServiceDesc for UserGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserGrpc",
	HandlerType: (*UserGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserGrpc_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserGrpc_UpdateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user-service.proto",
}
